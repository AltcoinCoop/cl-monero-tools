#+TITLE: Monero tools

Common Lisp toolbox to work with the Monero cryptocurrency.

* Installation

To load the *monero-tools* library, put it in a directory where your
Common Lisp implementation can see it, and use the usual:

#+BEGIN_SRC lisp
(asdf:load-system "monero-tools")
#+END_SRC

or

#+BEGIN_SRC lisp
(ql:quickload "monero-tools")
#+END_SRC

*monero-tools* requires the following libraries:
 - alexandria
 - babel
 - bordeaux-threads
 - cffi
 - cl-base64
 - cl-json
 - dexador
 - ieee-floats
 - ironclad
 - split-sequence
 - trivial-features

*monero-tools* also depends on the *cncrypto* library (C code of the
cryptographic primitives used by the Monero cryptocurrency). The
*monero-tools* system will try to compile it if necessary using GCC or
CLANG.

If it doesn't work on your machine (e.g. compiler not found), you will
have to compile the *cncrypto* library by hand and put it the /lib/
subdirectory of *monero-tools*.

The name of the library depends on the architecture and the operating
system:
 - /libcncrypto32.so/ on a 32-bit Unix-like system
 - /libcncrypto64.so/ on a 64-bit Unix-like system
 - /libcncrypto32.dll/ on a 32-bit Windows system
 - /libcncrypto64.dll/ on a 64-bit Windows system

For example on a 64-bit Unix-like system:

#+BEGIN_SRC shell
cd /path-of-monero-tools/lib
gcc -shared -O2 -pipe -fPIC -maes -m64 -o libcncrypto64.so cncrypto/*.c
#+END_SRC

* Tools
** Blockchain

 - acceptable-hash-p
 - compute-block-hash
 - compute-block-hash-from-data
 - compute-miner-transaction-hash
 - compute-miner-transaction-hash-from-data
 - compute-transaction-hash
 - compute-transaction-hash-from-data
 - compute-transaction-tree-hash

** Cryptography

 - chacha8
 - compute-key-image
 - derive-key
 - fast-hash
 - generate-chacha8-key
 - generate-keys
 - generate-secret-key
 - generate-ring-signature
 - generate-signature
 - recover-keys
 - secret-key->public-key
 - secret-spend-key->secret-view-key
 - slow-hash
 - tree-hash
 - valid-ring-signature-p
 - valid-signature-p

** Mining

 - miner

** Mnemonic seed

 - available-mnemonic-seed-languages
 - decrypt-mnemonic-seed
 - encrypt-mnemonic-seed
 - mnemonic-seed->secret-key
 - secret-key->mnemonic-seed

** Remote procedure call

 - =*rpc-host*=
 - =*rpc-password*=
 - =*rpc-port*=
 - =*rpc-user*=
 - json-rpc
 - rpc

There are some examples of functions using RPCs in
src/rpc/daemon.lisp and src/rpc/wallet.lisp.

** Serialization

 - deserialize-block
 - deserialize-block-header
 - deserialize-from-binary-storage
 - deserialize-transaction
 - deserialize-transaction-prefix
 - serialize-block
 - serialize-block-header
 - serialize-to-binary-storage
 - serialize-transaction
 - serialize-transaction-prefix

** Utils

 - base58-decode
 - base58-encode
 - bytes->hex-string
 - bytes->integer
 - bytes->string
 - bytes->utf-8-string
 - format-float
 - geta
 - hex-string->bytes
 - integer->bytes
 - read-float
 - string->bytes
 - utf-8-string->bytes

** Wallet

 - bruteforce-wallet-keys
 - decode-address
 - decode-uri
 - decrypt-payment-id
 - encrypt-payment-id
 - get-wallet-keys
 - make-integrated-address
 - make-uri
 - output-for-address-p
 - prove-payment
 - public-keys->address
 - secret-spend-key->address
 - sign-file
 - sign-message
 - valid-file-signature-p
 - valid-message-signature-p
 - valid-payment-proof-p

* Tests

The tests require the *fiveam* library.

#+BEGIN_SRC lisp
(asdf:test-system "monero-tools")
#+END_SRC
